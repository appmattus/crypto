/*
 * Copyright 2022 Appmattus Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.appmattus.crypto.internal

import com.appmattus.crypto.Algorithm
import com.appmattus.crypto.Digest
import com.appmattus.crypto.internal.core.sphlib.testKat
import kotlin.test.Test
import kotlin.test.assertNotNull

class RadioGatun64CoreTest : RadioGatun64Test() {
    override fun digest(): Digest<*> = CoreDigest.create(Algorithm.RadioGatun64)

    @Test
    fun hasImplementation() {
        assertNotNull(digest())
    }
}

/**
 * Test RadioGat√∫n[64] implementation.
 */
abstract class RadioGatun64Test {

    abstract fun digest(): Digest<*>

    @Test
    fun quickBrownFox() {
        testKat(
            { digest() },
            "The quick brown fox jumps over the lazy dog",
            "6219FB8DAD92EBE5B2F7D18318F8DA13CECBF13289D79F5ABF4D253C6904C807"
        )

        testKat(
            { digest() },
            "The quick brown fox jumps over the lazy cog",
            "C06265CAC961EA74912695EBF20F1C256A338BC0E980853A3EEF188D4B06FCE5"
        )
    }

    @Test
    fun testRadioGatun64() {
        testKat({ digest() }, "", "64A9A7FA139905B57BDAB35D33AA216370D5EAE13E77BFCDD85513408311A584")
        testKat({ digest() }, "0", "5DB6B188AFEF88AD8D2E426105ACFFCD42EE439CC26275D11F87B530DE94D066")
        testKat({ digest() }, "1", "3A3D7A7B79D1EC5A4DB4DC032B685574F7CA7517105F1634B61A34AA2575FCD3")
        testKat({ digest() }, "2", "66E36CE1926EC1F7457B670D7B68BD819B2D546A75E5CDFD2691CB5F3DC2818A")
        testKat({ digest() }, "3", "449B69EF4ACA0D081B6B2CE9C8BD22BE30BC1CAA130FB0714C8621E42FFA631D")
        testKat({ digest() }, "4", "05B7B2D2F2C0D48415E292325AD0901009F12EF1F9581A7A19C422795CF36459")
        testKat({ digest() }, "5", "95A02B2899296E69988B11D47B4B9FBA51AF22A09A854523924E8DFFE0EC8922")
        testKat({ digest() }, "6", "ED37ECED317B65B676F72F88CEA918B9B878C3F245E79D0C2D35D86C4DEE5A8F")
        testKat({ digest() }, "7", "8862FC05C7E23677904020462809A1F2784E117C349AD1D0D8CB0F433021D75C")
        testKat({ digest() }, "8", "7338658BFD49605F1EBB186E7E1EC3E75CF672655BCCE499CB8B3952B448B0B4")
        testKat({ digest() }, "9", "E2F59B35CB58EFE2200D9544A0BA5FC0659F6019D3EDD4E94A1BB0363166AFD9")
        testKat({ digest() }, "12", "BA12168F91F5C124F8AE3908815DC7F3FBF6BCF6E3C66BB8507B16B9B269541E")
        testKat({ digest() }, "123", "9719B972D31893EA2B24BD4AC88ACBA598AEFE75DD596692BDA08414080778C4")
        testKat({ digest() }, "1234", "733E2B49A53FB166B6F3BD341919578B8C931880F8B8BD7C0FBBEE1A538E7307")
        testKat({ digest() }, "12345", "CE8CEEA40E4FDA63EB2453E2CFFF0C9C68E969BFF13757987B0FF9B242394FC7")
        testKat({ digest() }, "123456", "1A41026D8183CB13B39819ACD5281617A25BE557C9C09E939F07EEC72347CE34")
        testKat({ digest() }, "1234567", "89C6A058B9E8A2C7176A429E941BBEE5F214A9B0603420562991CBF2751CB817")
        testKat({ digest() }, "12345678", "4C92EE54656958C6017A7C780E569695F6C354510537AC87206EE887B1E8F258")
        testKat({ digest() }, "123456789", "76A565017A42B258F5C8C9D2D9FD4C7347947A659ED142FF61C1BEA592F103C5")
        testKat({ digest() }, "1234567890", "93B2D9E81645DDCD588EDCB8EB0E18160C2CBF891760CB831D88C3D81F218061")
        testKat({ digest() }, "12345678901", "09C7288E06FC1040C330962737E95887DC6D8BC2985D04A5CAC122BE2689F26C")
        testKat({ digest() }, "123456789012", "54877BD9BA9DCC929B152EFD72F46AFC6A772A84FCEDA7ED85398932B185D5A4")
        testKat(
            { digest() },
            "1234567890123",
            "8DA9DC13C922E28DE1D2AC136904B18B8CA5C9332C89982D9FAED2B00C1D0AF9"
        )
        testKat(
            { digest() },
            "12345678901234",
            "64421D3084602E7388679364D5767AA5381F54ABD92CDBA4F05DAD06227F55AF"
        )
        testKat(
            { digest() },
            "123456789012345",
            "FDE56263C4A79F19A7EB663D1BB427243A6AD3522EC31FC00D81775EB6891978"
        )
        testKat(
            { digest() },
            "1234567890123456",
            "CAAEC14B5B4A7960D6854709770E3071D635D60224F58AA385867E549EF4CC42"
        )
        testKat(
            { digest() },
            "12345678901234567",
            "A0C5AC2493B71A5E9A4D41DD1854DAC0383193BAE0B5E7CA035F86AD052F46AA"
        )
        testKat(
            { digest() },
            "123456789012345678",
            "7898EE3F72838E94336E3DE2AFB4C9A7881D395B21ED74473186D919C78A8B88"
        )
        testKat(
            { digest() },
            "1234567890123456789",
            "F0D6C1B2EFC3D88C52B30DDF46920A22008F07FC4FFC9600FDDF1650FAF3FCB9"
        )
        testKat(
            { digest() },
            "12345678901234567890",
            "073ED06E210785942E619BA6BE2C00D4E8A8C991AAD67FEA3ED5E75A3A1CA534"
        )
        testKat(
            { digest() },
            "123456789012345678901",
            "4B71AF0C9D20CF9E827598592835B58235001D65BAA3779136BC45C8C7B26859"
        )
        testKat(
            { digest() },
            "1234567890123456789012",
            "20E64EC450D4FFE67138850E0F4AFE9C7805AB0F1E0B191DF6E57A5555DA6676"
        )
        testKat(
            { digest() },
            "12345678901234567890123",
            "540D61172733EF9A691C487E3739B49DF4406861D0F0AA8C373A56D5A81CBAC9"
        )
        testKat(
            { digest() },
            "123456789012345678901234",
            "EE7A689B4548FA98D83AB6B71432D4327AC172E3AD1302B0D5235D675B8D4952"
        )
        testKat(
            { digest() },
            "SECOND CRYPTOGRAPHIC HASH WORKSHOP",
            "4B9A38E4A968A2096F70A896DCAD202BC1D2D29B4470227F739BEA973233B43F"
        )
        testKat(
            { digest() },
            "August 24-25, 2006",
            "0950DF1B217D3079CAF7D2F5A7F91D3FEBF1A41C4887297B828E36FEB1998534"
        )
        testKat(
            { digest() },
            "Santa Barbara, California",
            "0D08DAF2354FA95AAA5B6A50F514384ECDD35940252E0631002E600E13CD285F"
        )
        testKat(
            { digest() },
            "In response to the SHA-1 vulnerability that was announced in Feb. 2005, NIST held a Cryptographic Hash Workshop on Oct. 31-Nov. 1, 2005 to solicit public input on its cryptographic hash function policy and standards. NIST continues to recommend a transition from SHA-1 to the larger approved hash functions (SHA-224, SHA-256, SHA-384, and SHA-512). In response to the workshop, NIST has also decided that it would be prudent in the long-term to develop an additional hash function through a public competition, similar to the development process for the block cipher in the Advanced Encryption Standard (AES).",
            "2C9EC1EFC5D2FEEFFC2817CD571F394328111DB8068FC79E2FB84A42416BF5D3"
        )
        testKat(
            { digest() },

            "5B62F66DBF00028A2360E80D7D1AF240C8342C38C8F1674BF7E720AD6FC9EC55"
        )
    }
}
