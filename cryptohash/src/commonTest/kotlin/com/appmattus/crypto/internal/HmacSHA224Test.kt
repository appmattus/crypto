package com.appmattus.crypto.internal

import com.appmattus.crypto.Algorithm
import com.appmattus.crypto.internal.core.sphlib.strtobin
import com.appmattus.crypto.internal.core.sphlib.testHmac
import com.appmattus.crypto.internal.core.sphlib.testHmacHex
import kotlin.test.Test

class HmacSHA224Test {

    /**
     * Test HMAC SHA-224 implementation.
     */
    @Test
    fun testHmacSha224() {
        // HMAC tests from NIST test data

        testHmac(
            Algorithm.SHA_224,
            "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F",
            "Sample message for keylen=blocklen",
            "C7405E3AE058E8CD30B08B4140248581ED174CB34E1224BCC1EFC81B"
        )

        testHmac(
            Algorithm.SHA_224,
            "000102030405060708090A0B0C0D0E0F101112131415161718191A1B",
            "Sample message for keylen<blocklen",
            "E3D249A8CFB67EF8B7A169E9A0A599714A2CECBA65999A51BEB8FBBE"
        )

        testHmac(
            Algorithm.SHA_224,
            "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263",
            "Sample message for keylen=blocklen",
            "91C52509E5AF8531601AE6230099D90BEF88AAEFB961F4080ABC014D"
        )

        // From https://tools.ietf.org/rfc/rfc4231.txt

        testHmac(
            Algorithm.SHA_224,
            "0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b",
            "Hi There",
            "896fb1128abbdf196832107cd49df33f47b4b1169912ba4f53684b22"
        )

        testHmac(
            Algorithm.SHA_224,
            "4a656665",
            "what do ya want for nothing?",
            "a30e01098bc6dbbf45690f3a7e9e6d0f8bbea2a39e6148008fd05e44"
        )

        testHmacHex(
            Algorithm.SHA_224,
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
            "7fb3cb3588c6c1f6ffa9694d7d6ad2649365b0c1f65d69d1ec8333ea"
        )

        testHmacHex(
            Algorithm.SHA_224,
            "0102030405060708090a0b0c0d0e0f10111213141516171819",
            "cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd",
            "6c11506874013cac6a2abc1bb382627cec6a90d86efc012de7afec5a"
        )

        testHmac(
            Algorithm.SHA_224,
            "0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c",
            "Test With Truncation",
            "0e2aea68a90c8d37c988bcdb9fca6fa8",
            // truncate to 128 bits
            16
        )

        testHmac(
            Algorithm.SHA_224,
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "Test Using Larger Than Block-Size Key - Hash Key First",
            "95e9a0db962095adaebe9b2d6f0dbce2d499f112f2d2b7273fa6870e"
        )

        testHmac(
            Algorithm.SHA_224,
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.",
            "3a854166ac5d9f023f54d517d0b39dbd946770db9c2b95c9f6f565d1"
        )
    }

    @Test
    fun misc() {
        // From https://github.com/crypto-browserify/hash-test-vectors/blob/master/hmac.json

        testHmacHex(
            Algorithm.SHA_224,
            "4a656665",
            "7768617420646f2079612077616e74207768617420646f2079612077616e7420",
            "4cd18ac6b4a70fda4033f69d458a8e0d653c650e4cb5db6b459f7bae"
        )
    }

    @Test
    fun misc2() {
        // From https://github.com/xsc/pandect/blob/master/test/pandect/hmac_test.clj

        testHmac(
            Algorithm.SHA_224,
            "6b6579",
            "The quick brown fox jumps over the lazy dog",
            "88ff8b54675d39b8f72322e65ff945c52d96379988ada25639747e69"
        )
    }

    @Test
    fun testSha224Seq() {
        val expectedOutput = listOf(
            "6E99E862E532E8936D78B5F02909B130AB09806B2AF02F7CB9D39D12",
            "1D1D08669FC34CDC5FE5621A524E7181CD5B5BAFCA3DA56D2E15FCD9",
            "014A21F82D0CAAD15EB74DD892187D7AD93F2BEB549A596DFF2C9AA9",
            "5F600F19EDED821AEED09781792F9435458A32A60FFC1B678FE2C905",
            "8D933E18052E7FD1F98E5E7D02384DA60F3E743801032256282AE2CA",
            "21362A65B49C33568251CD1366EB13A4E683359855C00F3AD6710896",
            "1E1814B72BFB185265AF94FA622E4A1A70826C06F2BE2EFD96E4E168",
            "118F2E1C2F1AB8AF2BD17842FCBFAC966F5B21A81996E3CBADF76442",
            "2C6C72703E33A20EA0333629503EBCC41B64DB829064A5C7897C465B",
            "794046ABC3BD8165D12C2453FFA3FC518D1A6498A48C91053BEA2966",
            "E6C3B6E2DC215702960633C976B86B8378D7780FF884910454032C7E",
            "DE7CFF6E85D9411FBD58B28FACF72DFDAFA115614BEF3119F6527104",
            "11CF7495ADC07EC29EAA7B3464F772D49999A5E1832F71FCE18CF7F1",
            "A7541E63945FCAD62D2570B015079DF0422E96075986B45772860F38",
            "AFD3EB7EBFBA79CC68E4F6F6A2D758969B5C5C014FFB53CFF21C2841",
            "28D942E37CB92EDE2E6F994E9EEE2BA01077D099F3562FEF97A8CAC6",
            "34C7562962548AC9661759B4FC347D6A82CD47991EA06E855571CDE1",
            "DA76FA12D69D1FDBA5E544495BBE45F620BE147B73D6AA64D3B3C298",
            "FBF1911FA019CB7ACA20E3F93ECC0D5E8D60DCA0A1A7420C63BA1864",
            "565FEDE0EE20842B82D59644929C2A1A426E397B38FAA772781FE018",
            "7B9C2BA77B2989904F194021D308089E23F00954275AE9AD87306A31",
            "66CBF93ED8071FFA36B61F3AABFDBFE714C3C055B2FBDCD3CF369025",
            "D96F10ECBFAD7FDDDF60BF1511E94869ED1D992051539E50D5F32831",
            "5473F93F0D979D77C3C6B9CEEB2F3DC1058D81401669EF4AEAFA17E7",
            "5B5A75A7D99C1B40961533C345B95FBF0AFA916D6E133967FCAA15F2",
            "2A1E50E18C37AB7BD928AE14C206FAC9B3E869173CA337FB9374565D",
            "BF2B241659C96007ADC25D9567947BAA740555D066636731EEAE3C97",
            "6E1E7B64A70B190BEEBDB9DA82C8E4B160CC73B8FFA224A6B92180B3",
            "BE36A5F8DAE9294B3995D278CBE9273E66F04D46890B44EC55028C3B",
            "9983C289CE2F806F41182752A753E0A890217DAF3778B3AD2ED6685E",
            "8B0F08EDF2CBE25E8F9EE4D2948BA6BF81672BF4F509530328A8BAA2",
            "B65FB77E6CB86E5F409EAC2F1B5A05E1910213563F816121AFA8CF14",
            "5D15E17C8C159EA5DF5F126B12ACE777EAB36A0082C57DF71E4D9609",
            "DCCB3D17C8756F2546B3E5B24B1678438959D83A56524415666DAE05",
            "D28DAB7CA715AC86BF4469D743A0005AEE0101F339350661D46A1684",
            "E7A1CCC4B2B300457DCC64534152119390B69610C7FF9DD3A683439A",
            "29380148DA403AD5911C7BD52C783EA97EC306F2B32BC426C4D7FD35",
            "56DF59CD635F025925A968591E60DF2CBAB22F98B67C78122F3CE868",
            "C20EF10AE9CD99CBB54C94C971780E0487899D7A810FA51A6553DCF5",
            "5B78837F366097CAB6D31624C06B099BDC71286E3AD8873509ABF4CE",
            "8DA09589C44E710B9F84014FE553074E72E0A86C9418EFBBE420D2C8",
            "EEE18FA2BB5A5CD16017B4621ACC4211EF7CD60613A8C879B0AFC0D0",
            "AD9670FCD043E6F91CE986E6F55905337248B72E7B8551AE72ED32BF",
            "97FA4FBA4815DA49F6127C96C969574AA9543B338F93BF9171D2547E",
            "838D5AC81EA6BACB827327E8EFE96CC2B14D92C55B40CE58F4DA181E",
            "CA99480DC8480FA07784EF02074453664DBC92257366514060F07C93",
            "93B0E493D272470F9F274DFE4B9DDF183B26011090E15861FA21CAF2",
            "770CAE487AE5890DC0B931EC17623293EFA5B22EE1ED496A37EB9FCE",
            "6F1D5CA0446E7B82DA02847ED1761CF02D646E56FB0CAB9B120E5282",
            "2A8A1254F6CCC3D656397A5F2D64C266412FC5207866B073B77DBDEF",
            "E8CB788AAA965ED87FF2C7B5F3107684326DCBB0E667217E0EA62C51",
            "85BDB6D1486F27827D5870812BEEE2C3976E0DED4BD2F994BBEC12AA",
            "A14E0343FAD6BD78E0A8E3BCD6D0B6C83B1220FE6C89F57F44BC805C",
            "2C60D71F2D4BEC90CF10804DCEDB9311637B34D62E9CB68B8503162A",
            "36397D66B434BA744174DA541F080CF6582F10322C7FB1869A100141",
            "F612E4EA307F56447112CAB5D2EBEA7D12C7C4427D9155D4085687FD",
            "9798B420980748993BC78E3601B8AEEE2D2CF6E59799C7B07B88435E",
            "50BED37F1EE78FAE16D178FECEC2EBE4776C8E5FC738F9506E8AF676",
            "2755438A9AC457B81999D9E1E479C36DD9AE1F920F5BE6D109ED7431",
            "F3DC2238B13BA706A048253F86B79045B72EF767CF25DC62F96DAEA0",
            "11900A3154C4DFC49B941258A134C9201DFD280728BDB3F8BC7903F8",
            "FC584202454DD7C9258F72A6258E42F3C2669FD138FD7AEE6200C4CB",
            "185355C13E146EA89387C332225DF31CF114AEC0BA3A5A5B53667709",
            "8194DABD2F7A02DDDD7B752AB5669821519640EE3B0059FD333F3401",
            "2CD6946C6DB676ED1EC272AE34735A0546AFB8D996323272C39A814C",
            "B7A344BC5EFFEA97AC49894A85B96F9B570E680DFBB28C76F7F9A180",
            "9011B80655A9CC7964CBC4BEE1CC03074003CCCFF5DA553B289ECF6A",
            "6BDE25371B7EA9ABE31A524E49CAAE40DB220E405463D93FC7F66904",
            "35694194E10D0EBCA6758099D09C99C3CAB37AFA52FC4F4361C510F3",
            "4E7A79F362D7AE5B1680F30E6770CA46FE6264C9FCA566718C01EF67",
            "9DD18D21E413AE12112AFBE16684BFD4FAED7467A2FD5904EF0B493C",
            "7532D374B66B1E5B17EB49810DC3C04264553E4C36F4550D1E860B70",
            "35EB09C82A624B1E3ECD965ED8522E9572EBF26791EFA667B4DB952C",
            "B9C17DF6F2A6506FB1DFCF1A9089974C45760A438330AE7547DFE685",
            "A7DD0267C15B36D8BD1879F879E894FB9F33F254556B87BFFEDD71A0",
            "68A354D120CD63A5D34EEE84B7E5E5BC1E5DF6E021F712BD4270B781",
            "441DC4884130D48BA134E2FBA86AF643C8EB79CD1AA4688F82E0D3DC",
            "17A3F16DEAFDBC1DA00BD14D9C24497BE765F41E2EC79578421ED8B9",
            "8756A267D0CAD54BFC848FCC4D6B6C94D39CAF07831EE35324DCD35F",
            "004EBADA70F19BAB48E6072E2090941DEDB5CC0A7B624E4BBB671382",
            "B7F8D35CB865977423710FA1E0F939808E68ABB54BD7EB0427DA03DE",
            "F3D0AAA2F912FF95251D3CF51EBF79B940DB56839DEA8BA5872D1FDE",
            "0835B2DC376BEAE873F1FA337D75C72FD1BF0F72A81669AA891F2722",
            "7CF9A7D57CADEC3F013D4BD87C00B420CBFF73670A9CBB072D18EBEB",
            "68AC0A34930329F5AA40137987208481E34D8B9C08EF7A85AE3AB38B",
            "00492F706D84B903D5355FDC0B68C2C33B484A95A173FDC4AC945028",
            "6F6C509CDCC84CE1C36AB76C9BF30E4422C90C869C164C64696AB5B7",
            "4C0A35D512BD0DB15915DE08FEA8E6027063A1780C104F6273CAD5C7",
            "27087F6425878D64A56BD5ACCC0E303F803B7208F20AEFEF75501F03",
            "4EF78140430EF60F3CA12AAF8132674B0DDB154F495029B4051C2A36",
            "BCCA3153EF93AAF21CA02D235A23D3013976295E704223CB37E860BA",
            "20CC8D4C64E09B00ABF23864BD7EDE542F5BE480AFC4B9551B301EBA",
            "ECA3F86DA00098D91F866C58558BB7B00C9E4239CF83C5A3E76291B3",
            "7AD9AB198858820D20373C45173D76AF8D68F829D9A250ECADEE0DA1",
            "3E1C202F2D589BDAB015306AD063784E5BEA48AE8D1DAF45D571D2FD",
            "990C44330D56EBC9EDD951F8CB92D5847F4BD3C6442906F57A828FA9",
            "C92F9FCC6220EDEF52B6F842635A83914B236862F6CCBED16F4899DE",
            "0E41C85D5C6D625E1884EF7438DD9EBAC818AB50CC265A73165928D0",
            "AE087D57F9CDBCDF4DD68A3E8D5BDFEC709A532A4A646CB31785506C",
            "4CB03AEFD24C833B5350996EB261E803F6DB698FB81F37F8A5C3D891",
            "E680BD218AE972999BECDC905F4D39251ECF49B29CF0A13AF5FB09A1",
            "64326D6B692B0A17045434BFF13282ACB91E7B690339F7FCEBCC9AE6",
            "20CD91504AB04E2D3CD849808F2362943BECB310F4A0BF6E3BD47751",
            "80F607E2D79E1EFB0458E47C8E5726CDB8387BC05F42D6EAE3239A20",
            "F83C023D6F539967AB24309DD28321599782ACFCFC76B77186307300",
            "70164A250799DBE6C5BD3EDCDEDB16D2516A9FC1BBA294C49F753824",
            "1883397C9C4C9D33FB9E1E03325EDCEA1606D7ABF86C4387DABC449E",
            "1355DFA06822CC1F216C131F2BAA92A10BBF109BA3E648419A35C0F3",
            "9E35B9B307990B7D664B9EB7F06EFDD23037F859ACB6B96A5287A846",
            "CCCA26C8F8405FF62421558255F2DA06F73F17D1AE1763A0BF8430DB",
            "B4FAE909368405206333491674559B9094DA4C48913D9EACA28AD75D",
            "3A5E7D9273F91E10545FE6861D4FC223A5EB0F7B4FBFBC9931634C25",
            "96553CF0C5C6F6A17FEED04024FCE1D292C392E60B3595FF53007AD9",
            "CA9B79F403412F71FBC10E094B35088576EB3F7F8B5D08757D89F45B",
            "CF60CC5B1822E4A12EEB3E1E5F4AA79E345D8C8FCC546D57DCC7C784",
            "807D65C33E74DA0E2D5E3788084C61AE3E8771FDFE643D1269A7901A",
            "A5418DBCA94A1F9692FFDB3F7AEED75806CD9FD47171A6B67921C0A8",
            "C2B880C9E9D78B0C397D72C8B6684276E8C22A7F4D6821DB7C998775",
            "EA447EA731673E5DEAB57012CC9E0D3A7B2443165B665822963FD6B5",
            "0F6D50C04357DF9240802977779D7F2214FBDBAE95B6D8F59B414964",
            "A3B24B29B29BBF32A01F21FFF13F44FCAA5FED50718803AC3BAAC548",
            "E31E36C38A7F2525ECADECA047533830A9C46D609E297142AB3DACAA",
            "592FF0C399A6CC1606FA3F404DA4BF8618A4DF159CBB7E05DCD30BEB",
            "EEDD6A5902091ADB8EF491F820613740DA73A160D825121912613DDB",
            "3A2FCBFCB007F45CB0EEDBDD5A765EA0CB7A142CE3C024114D6D61DC",
            "5D29E1732898854AF468BBFA5B87065BB811AF8F55C91E82E888E842",
            "FD1F646D021EF31F634EF5FB0506620686B9F7D9B5C672734CA10FDF",
            "5E43945BA9DE62C364E34CC1361FFFEE9BE8974D7CF5D2E06428916B",
            "0FF4DA564729A0E9984E15BC69B00FA2E54711573BEE3AD608F511B5",
        )

        var key = ByteArray(28) {
            it.toByte()
        }

        expectedOutput.forEachIndexed { index, output ->
            testHmac(
                Algorithm.SHA_224,
                key,
                ByteArray(index) { it.toByte() },
                output
            )

            key = strtobin(output)
        }
    }
}
