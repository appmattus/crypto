package com.appmattus.crypto.internal

import com.appmattus.crypto.Algorithm
import com.appmattus.crypto.internal.core.sphlib.strtobin
import com.appmattus.crypto.internal.core.sphlib.testHmac
import com.appmattus.crypto.internal.core.sphlib.testHmacHex
import kotlin.test.Test

class HmacSHA256Test {

    /**
     * Test HMAC SHA-256 implementation.
     */
    @Test
    fun testHmacSha256() {
        // HMAC tests from NIST test data

        testHmac(
            Algorithm.SHA_256,
            "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F",
            "Sample message for keylen=blocklen",
            "8BB9A1DB9806F20DF7F77B82138C7914D174D59E13DC4D0169C9057B133E1D62"
        )

        testHmac(
            Algorithm.SHA_256,
            "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F",
            "Sample message for keylen<blocklen",
            "A28CF43130EE696A98F14A37678B56BCFCBDD9E5CF69717FECF5480F0EBDF790"
        )

        testHmac(
            Algorithm.SHA_256,
            "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263",
            "Sample message for keylen=blocklen",
            "BDCCB6C72DDEADB500AE768386CB38CC41C63DBB0878DDB9C7A38A431B78378D"
        )

        // From OpenSSL

        testHmac(
            Algorithm.SHA_256,
            "",
            "My test data",
            "2274b195d90ce8e03406f4b526a47e0787a88a65479938f1a5baa3ce0f079776"
        )

        testHmac(
            Algorithm.SHA_256,
            "313233343536",
            "My test data",
            "bab53058ae861a7f191abe2d0145cbb123776a6369ee3f9d79ce455667e411dd"
        )

        // From https://tools.ietf.org/rfc/rfc4231.txt

        testHmac(
            Algorithm.SHA_256,
            "0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b",
            "Hi There",
            "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7"
        )

        testHmac(
            Algorithm.SHA_256,
            "4a656665",
            "what do ya want for nothing?",
            "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843"
        )

        testHmacHex(
            Algorithm.SHA_256,
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
            "773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe"
        )

        testHmacHex(
            Algorithm.SHA_256,
            "0102030405060708090a0b0c0d0e0f10111213141516171819",
            "cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd",
            "82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b"
        )

        testHmac(
            Algorithm.SHA_256,
            "0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c",
            "Test With Truncation",
            "a3b6167473100ee06e0c796c2955552b",
            // truncate to 128 bits
            16
        )

        testHmac(
            Algorithm.SHA_256,
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "Test Using Larger Than Block-Size Key - Hash Key First",
            "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54"
        )

        testHmac(
            Algorithm.SHA_256,
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.",
            "9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2"
        )
    }

    @Test
    fun misc() {
        // From https://github.com/crypto-browserify/hash-test-vectors/blob/master/hmac.json

        testHmacHex(
            Algorithm.SHA_256,
            "4a656665",
            "7768617420646f2079612077616e74207768617420646f2079612077616e7420",
            "83038173da2181cc0c8c0f92e79c4810e33a6aaad6d09c127cda8cb29d10b734"
        )
    }

    @Test
    fun misc2() {
        // From https://github.com/xsc/pandect/blob/master/test/pandect/hmac_test.clj

        testHmac(
            Algorithm.SHA_256,
            "6b6579",
            "The quick brown fox jumps over the lazy dog",
            "f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8"
        )
    }

    @Test
    fun testSha256Seq() {
        val expectedOutput = listOf(
            "D38B42096D80F45F826B44A9D5607DE72496A415D3F4A1A8C88E3BB9DA8DC1CB",
            "12B06C3218C858558CAD1DA6FE409898C31014D66CBE4ECD47C910EC975E104D",
            "EDBEF6AA747C951F25AB6AAA0D874648CF18FFECC4C9159F8FC71E971FAC6D21",
            "03436338A166E9051599AB268CD74867C6159378069A9FF46FC07CAE375EDA68",
            "634758DF0774A587F3AC6AD7988D0965524DE24EBE4DFF07EF622BCB8DA71ACD",
            "0C08E52C7CFF8B5F70781197069DC8F209552D241687BA0D24661CCCC28D3937",
            "749F473E0D934694AB9917569A61591CA50BEF18CABDED51666DF243DE879D53",
            "B1E12CFE0273F5D27192D1A4B70EEC4DDC714B66C8BB1921C63381F78CEC5219",
            "1C60F13A1C539788E989BAC2EBD4F8E126EE6ED82C2E25817C63B2B633FABD33",
            "5643F445B2C0656A49BB3DB5088C9E2E4B2082C2B611BBA0DAE5791F2FAA5D43",
            "C467F47251DAD4694C9C7A6758E54CEBD68FC933C7C57458020774A2A2B4288B",
            "85C90CF2719BEBF40EF8D501FDA20C342BC406E728551BC0275ADA1747BD981F",
            "06B72DAC895B008DA249B7B1D8A5133F09D86BF82DE2C4251BFA6C3D8C4CF03F",
            "49EDB6714A556DF324E41A3CE5B57006E38FD7CA8B90FEEA2ACAB429204747BE",
            "7411921D759DA0B491D6D4CC372DB79CC163F146C345B4A73D93EEB4C262A1DF",
            "5C37FFBD1F0512AF443265B2F3E8B6D01AD9B45FF6F373D2CD0A7C6E48D03E26",
            "773165FD16D51E51CD8A958E548902B47BBD0A6E156C31B6FEA036F6D8C4A90C",
            "5B4BE909754EBC8ECBBB8B5DA6298B8341B35D92E17CE7281909EBA1EF568347",
            "C6EEF2D12F54815561EEED3426D7AA7E671E26D42384B9478D91FC6B14CC76F8",
            "4C9FA0575CD96BB1DEF6EA79F5EC7A1F0478E86352812F690C2C2BDB70028BCC",
            "7F87BA45FC41EC30E76F61E4EADEC013CE2B4C49CA6FE6D2FA525F6BBD45E103",
            "9B8CA1D70339A0894E16CE4E76F6655ADDD3EEB598F3DD80FECC5EEEF3F638C3",
            "E4608AEA430A638799991B748BB858C91AF58F56B226E1901D28336B30498279",
            "AF4F9C52079B28546FBB44EEBA20C7AF0BF493D34EF6967B07CA32FC4DE25ADB",
            "FE51F3A9313EEDAAA991350AB4D1D7045D42AACF3AC7155DA3AD9A2F1DE3A73E",
            "C1F5AED9D77F85404A4B308A139D33F351B20C91A738E698BD8182F124D96C82",
            "3CAC12A252B93B7D724AF9119FD3C18E85E88401F93BFF42AA05711B9833B1F6",
            "E61D4E94C212324A64B1A0C04B2237A9A1C5CC003D83EA80BCEB45452DCB42F2",
            "D01BA47DABCE4704B6820EC0ECDBEF137B9C4ACB80DC99B7C9220CFD9F9CE363",
            "AED502C53A8B2C76F671376CDDBD0596376B3664B917CD9C9ADBC489543D4721",
            "3405AFD96584C5E5963362948D112A70155877BE3B5EFD479F226B73351ABAF0",
            "5FA0290DC68B72B1FA27DBAF157923C706B3F52CDE9C4EE38CDA31D376B0BC0D",
            "C1391C694C985CCBA707A8C78AD05E2180AF6B4DA5BB877AAC5E2AB33B4890E2",
            "B018E7B15F92DBEC58F767633BCA3BD0D84B6D5B9443784DC1757166D7AA1C16",
            "8D9E2C84967004E3957DF59D502BC11CF8C8959368117EC5DB56AC958A3E791B",
            "B0EAF9C0E869D7A304DDB30061A73C580B0A6F9D49E15442ECFBB3B5A851855B",
            "0B48B0D8C3ACF7B4F9ECF8E46563C921B1B6720B6C650D72DD1126B6763CD595",
            "8879D239EDB09F6606957D96A1F4BF37EAC0F3419881EEA79E8BF1364FB3FF6D",
            "CC663E436DE42E32EA110F9D90EB990D9151C9F06D51243D2076B0CC45361736",
            "732DC3B1F809E55C498C53FC75A23966CAEA16BE984F795CB1BC94D026FAB30E",
            "F1F0EEC77D97A0234D0F19B2FB12A96B6E2FF8626F79A74D4AF26CDE1344D838",
            "75C9D8C7344668C478D8AE6D9E2C41E336E7A2504CDD43B73CCBF78B4C05EEB1",
            "4B149BCA6429408B242E76C52C4D3A0A5F5437EC0AB6D24D71EB1AC5496D75BA",
            "EDB65EBEBC0411B4FDAF186033E306AD500711CCB80E770E99523BB2672A237A",
            "D1BBFF5A48346A0DFD5CFFAA7A2AF08C27F3FC2908D7A5D2F575E07CA9E72474",
            "E8EFB6373DD3457610E57750738358A50026D2C6704A98148CDD69BFF7B70551",
            "8E3733B729CEB97444BCCA405044B98F45FC59BBA86444A3FC0F4DF4854B5C4D",
            "868F3EE8F4D4DFEDC3FFAEEE1FA069F5FBB2CB818E63C28151C1566634189234",
            "3F5396115DC7F17AAB19A3A9779CFFCCA57DE7A7C1A42F748FEC49B7D8C2B82D",
            "DC2A5E3E176A693AD8CAE551A505729B78FBDE778B526E28953BC1A56B54840E",
            "DC91FD745E9A7A9D0B41C79B3B3939B84BDF78BEB007F9AAF8FF82084759223A",
            "E73DCF5413F17D4ECCEC813DC060EF907C2E952AF92DD247A0AE2BE798E6A40B",
            "696B5EE4C1E1D8B60B0015EEA2389C9A35088022FFF10034D0D09FA722A2A3E6",
            "F86C07265389512B2CE240A89EA29D61C6C79C2738FACA157B0DE43294485682",
            "DB31CBBFD28D6F8564219911EFB748A5663E482DBA26E38634E8E27E3CF65707",
            "2F9675313AAB7A940AE77CA906D0342A448FDBA3F7589D14B1344D586EA157DE",
            "7D829FD994258EF2AFDEF22C8CD5CC1D29A9A55B62847B3B6F5DB630421CF999",
            "A6CDB9BC9AF75EA4680E895E8EDDCE76F536F7CCA571D62781A06DDB3424FA50",
            "1B4186A34EB07F5B3127F2BE0F3943610679DB0F6BABC7DA03B416FA577D36E2",
            "7B5DFF3459DC10B9B7AA2B2829094F97706DB5B2F133B8BF9F48D90253D68359",
            "2ABB68160300028BBF3B5A414970D11DF4FD6F4B4A35029DEF8492ADFB19A480",
            "B1B13ABF9D20C42E755D63EC63C016126259C8A6C3F9AB3F0F6AC5D0BD44ECA2",
            "9ADDD17E5CF407CDBB12E5E52A50CE134F1B48A2A2AF90D7308344FB5A70485F",
            "6A4C06DF40BA515C56476471D4A94F87A2B91EAFF6C66510892F2F20A342B736",
            "555D424206C003BAD0B08BEEA76DFC81B307C79BBB6E4F15325B2ECD37E04423",
            "8A58733E0B990D0D82F93F77DF36E30DCFD03B3181B73C544BB097A3A73B6AC9",
            "6FCCCCA4172E30A281A702E36E7BCA07370D4B57272385077A44D5F7933DD2FC",
            "3B1A91E49AF88B1832F8E91109C7CC5DBEE2847D9ACD2A57404DBB565480AC75",
            "69584075C278763CB0B09D4C9E15E9300A191BF99907049F14EC8DE24D86C121",
            "2EE24340D13E68B10B95C3F77D55027F98BDE6BA5328D0C02CF89965687C062B",
            "C04B37F5932F427D40E21EEAB7C9594B16BFCF4F5FE2BF175CD63C62F2CEEAA2",
            "058E1AC8971ADD2617A4BF7D02B46A8B74A4D52B25643DF9729A1E7DF6CCC86F",
            "18001F246ABC760197482E25F3AC64B14A795E55B41B505D6027261BFDE7C52C",
            "4AEAAED524B173E08E54A83E2D9A8B8824E6E2F1B89203D698E9BCE7C3242F8F",
            "7D82CFB1D7427302889CADBA23A99154CBAC0C9ADEC94EAF29EB07DC86B0B7E2",
            "18D42E92BA532A409CEDA8E3A07E751B430800827F5A9F14D93E3ED231BA08AF",
            "8CFBA378D8595372DCE5D9A6E726C23512F84C0C1EC3C66ADF6B6C55DF63936A",
            "DE1A6E280A9054C91B826785928F37A16E1D2A9A3CEC831185B26D2B8EDE158C",
            "920C40B4204C7F3D4775176BD245BA0276604C568B3C29943C9AEF1A1C93428A",
            "935BB39E5FBCE5C4A15AC2A854475578CF80308E531CA86818DABE69BED8824A",
            "D608E561471CC09EC0865C826242CA26AA1C90BDF1625E1A38B96E3EE0CC5F04",
            "EFE2A8D806A1A71596A05A2F5F48D18CFD4A742247B04E8089FAB27291A8DD50",
            "80235BE35DDEA5D49F124D8BE3D143F87CCBA7D0608C7E2CABBAAB01BB95E477",
            "E9410E0DC14F3BE36A49A5CA673C12E18CBE4F0817E0C1CBD2069349F8A09BBB",
            "B2042A81A36F27B4CB96DBB52A61F701A815869FF5AA0CDCAD0327E1ED1C2F22",
            "E9E5A9501B24952DCFBB9D59CF95A9A9E6A27FB7315EB472D1E2B7F523D06D42",
            "99193B4FAFEFFC932B261EF169250B96901ABF877424FF667CC0DA0154C50498",
            "1D9C7F7E681D20E1E0324EFE71C8B6913FE8CA87EE52E443335115AB2C458E7F",
            "7308DB7E2591D2342109C5084B1174F07D289FBE91472FB2D8C06DF39F826B84",
            "90F06ADC29070DC50A23D3F093007E273E783491A70A2F0AD6BA40E34F02518D",
            "E676DEEDC972019F10FEC24B4AEAC0A97870E924F7B1D6D3ECF91EF38A2AC544",
            "B5DA3B40FBF373795E67A6338F9AC3AD742741F34048930D9336D429D02EE78F",
            "6FDE20988863CE157042EE52065EEDA233BB2E6EC0464B9DCF2AAC1F3A18971F",
            "428D4CFF477F0F0379F634D1E7C15E4CE6DA067ADC45221A860C9C3AC4235753",
            "9EC80B57E921DA3F81D13B65AA851F5971E4074C96E0D8B64E50A7F5089C1FC8",
            "9088151BEF766D0896A48EB6DCC8A09D151C3396FBF3A9FE193C5E7BF9030B01",
            "86D853024A762536666316F363BB867EFE25FBD03BDD28EA7522973A1A1BD95C",
            "007104BD935B532BA4702A78C505D67B41358A61DB8069585B91B1445DC346B5",
            "5C5709F6202948E805FAC25C454ECFADFAC693955864494E511F0CD1FC9CFDCF",
            "0B010F71C5323CC96D3B8DF71170968096E44969EA55B4C3DAC632D30D81D529",
            "54621EC4F31CC7F6273601D81674612B44726B5CC4A76EAD2BBC3D32DBF62A9D",
            "28EFE1AB745BE64E5DD7286C97360FF2D287F862ADBE44380F85E1388008079F",
            "831BFA684C25542676AD52819249A10D9EF9C2505D69CC1397D0D39D08B39E5D",
            "EF7922C40CD96A47C5E7AE4D958B495F1D6954EDC20596E303CFBA43190A9EFA",
            "3A0262EBC746A7C044C1DB043951F7EAC645C40F554898D3D7B2B7AAC4EBD396",
            "1F2CFBA7275639A12DA7CD1986F920C47850DE3FE13C931618C0FAC765820ED5",
            "7AC8913C0975101E187FDADDAC5B5EC467A25869C4E630EADBB42DD2DFE4958A",
            "D386591F326C91D274FE625A667B6F9F6F7D99CF56ACB365A218F1CF8E167A70",
            "66286CB1B61156B005CBFC94C2CAB1A6694D7F123411B8A123F2ACD821C291F2",
            "844D1038E710690050DA737D56FD6B17C261C7BE512713E62033384B53C40902",
            "7EF970C40080F554851277F4E950C6F378B0A3DA3CD1BE250D976162F8A4EE79",
            "9BC20A2B67566688BCAC77FCF30259F11D9B2FD2277D033E6AAE19E36058A353",
            "796C72D95BBA1A4341C6B0397E165DD21CFBEF55555B35C717CE33B6C6ADE490",
            "1E6A9C1F78AFF266EF8FB25C32C1FDFB4A0F64AFFD046D257470BF6DAEF61D6D",
            "0E1AD927AD658C5E0321333AF8AE4ED69903B4F22C5DFF90AC93268507A7C86B",
            "07B7A778E2931704E7FECA284FF3B14071E255A2B824AD0A2272D21448579CEE",
            "A8D810DF06368A0E825D6DB4394916E43E217BEE9303AD4096A8E1CAD37B8703",
            "6A9C7D302CCA1EE170366F355D8F40AE3A20D28BFCB2BA163DCB68E08DACB748",
            "40C3A8B08FF9F767491E4243D1808572FDAF1D8CD21AB47115849531513D0750",
            "F26EA6760AA80360398371855783815BCD34431E0CCEC58A34A67997ACE43CEF",
            "EEA78D68A509988ED6D7E3F27FC22F3EBCD570EF0FE242A0251457EAC4C3C1F4",
            "AF977819B87F2E63C0E131DFA2A31C555AD831ADCA6DE0FC1BE48D21A1E7E666",
            "846A75DF3691B2BF224FB0E66E360A2E8BB1DA32422190F2B319B73E6900AD42",
            "FFA997FCFABC9FCAD4B58B0EF848890FB23B974CD57FA07223037450C371B116",
            "0028C776965A0AE5E9E70D9B833BF328BDBCD06C5A12A2F1C510911E60AA304A",
            "7FA234C59957C214A7BE8D1B909C540B48E54414EE5FD1081B4C339FD2204515",
            "A840BEEBF2C2E80AF2E4830BB26F71AEE48A9C65DE4A9425DA9F98FA3A37DD84",
            "A95332415EA29A8CA6FDB0F771E3F2262C6907DC45B0AC8BC229F6009323C3A9",
            "8B185702392BC1E061414539546904553A62510BC2E9E045892D64DAA6B32A76"
        )

        var key = ByteArray(32) {
            it.toByte()
        }

        expectedOutput.forEachIndexed { index, output ->
            testHmac(
                Algorithm.SHA_256,
                key,
                ByteArray(index) { it.toByte() },
                output
            )

            key = strtobin(output)
        }
    }
}
